from tvsclib import TransferOperator
from tvsclib import SeparationSVD, NormalForm
import numpy as np
from scipy.linalg import block_diag

def test_separate():
    matrix = np.array([[6,10,2,3,4,8,7,9,6,10],[3,10,4,2,7,7,3,10,2,4],[8,6,2,10,7,2,1,1,1,3],[3,4,4,10,6,6,6,5,10,2],[4,9,5,9,5,4,3,6,3,4],[9,5,6,8,3,1,10,7,6,4],[9,10,1,2,6,2,10,8,10,2],[5,1,6,4,8,2,4,7,2,5],[4,6,3,2,8,7,1,8,2,1],[7,8,3,1,6,5,7,4,4,7]])
    dims_in =  [2,3,1,3,1]
    dims_out = [1,2,3,2,2]
    T = TransferOperator(matrix, dims_in, dims_out)
    # Balanced w.o. approximation
    Sp0 = SeparationSVD(0)
    A0c,B0c,C0c,D0c = Sp0.separate(T,True)    # Causal
    A0a,B0a,C0a,D0a = Sp0.separate(T,False)   # Anticausal
    sys_causal = np.vstack([
        np.hstack([block_diag(*A0c),block_diag(*B0c)]),
        np.hstack([block_diag(*C0c),block_diag(*D0c)])
    ])
    sys_causal_ref = np.array([[0,0,0,0,0,0,0,0,0,0,0,0,0,-3.4058,-3.9842,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,-2.0628,1.7633,0,0,0,0,0,0,0,0],[0.76409,0.067964,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.8371,-2.4521,-2.6855,0,0,0,0,0],[-0.3406,0.06674,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.0518,-2.4975,0.35001,0,0,0,0,0],[0.21525,-0.30823,0,0,0,0,0,0,0,0,0,0,0,0,0,0.75782,-0.9142,1.9414,0,0,0,0,0],[-0.082257,-0.75327,0,0,0,0,0,0,0,0,0,0,0,0,0,0.63033,-0.24445,-0.99136,0,0,0,0,0],[0.0084328,-0.23724,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2245,0.49456,0.4078,0,0,0,0,0],[0,0,0.8009,-0.37823,-0.20989,0.024934,-0.015944,0,0,0,0,0,0,0,0,0,0,0,-1.6006,0,0,0,0],[0,0,-0.030131,-0.59617,0.74378,0.048807,-0.16007,0,0,0,0,0,0,0,0,0,0,0,0.32344,0,0,0,0],[0,0,-0.12687,-0.087078,-0.025419,0.41998,0.22021,0,0,0,0,0,0,0,0,0,0,0,-1.7976,0,0,0,0],[0,0,0.022421,0.064602,0.010813,0.35144,-0.53631,0,0,0,0,0,0,0,0,0,0,0,0.23749,0,0,0,0],[0,0,0,0,0,0,0,0.78626,0.00027434,0.29845,-0.074746,0,0,0,0,0,0,0,0,-1.2315,-1.8064,-0.91575,0],[0,0,0,0,0,0,0,-0.0067844,-0.32788,0.35781,0.42718,0,0,0,0,0,0,0,0,1.6524,-1.2034,0.53124,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,6,10,0,0,0,0,0,0,0,0],[-1.8221,1.5541,0,0,0,0,0,0,0,0,0,0,0,0,0,4,2,7,0,0,0,0,0],[-1.8619,-0.80421,0,0,0,0,0,0,0,0,0,0,0,0,0,2,10,7,0,0,0,0,0],[0,0,-2.0784,-1.6953,-0.050156,-0.75312,0.88909,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0],[0,0,-2.5088,-0.80712,-1.081,-0.97751,-0.79818,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0],[0,0,-2.3873,-0.811,-0.67447,1.7841,-0.12069,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,-2.8133,-1.561,1.0463,-0.49382,0,0,0,0,0,0,0,0,10,8,10,0],[0,0,0,0,0,0,0,-2.0014,2.2035,1.0721,0.046367,0,0,0,0,0,0,0,0,4,7,2,0],[0,0,0,0,0,0,0,0,0,0,0,-3.2289,-1.8011,0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,0,0,-3.3656,1.728,0,0,0,0,0,0,0,0,0,7]])
    sys_anticausal = np.vstack([
        np.hstack([block_diag(*A0a),block_diag(*B0a)]),
        np.hstack([block_diag(*C0a),block_diag(*D0a)])
    ])
    sys_anticausal_ref = np.array([[0,-0.87426,0.26403,-0.070286,0,0,0,0,0,0,0,0.45947,0.6892,0.91894,0,0,0,0,0],[0,0,0,0,0.77078,0.33323,0.070169,-0.075168,0,0,0,0,0,0,-2.2765,0,0,0,0],[0,0,0,0,-0.07134,0.30568,-0.91803,0.046832,0,0,0,0,0,0,-0.44099,0,0,0,0],[0,0,0,0,0.088195,-0.22237,-0.2192,0.13768,0,0,0,0,0,0,0.5119,0,0,0,0],[0,0,0,0,0,0,0,0,-0.59995,0,0,0,0,0,0,-2.6182,-3.1425,-2.3731,0],[0,0,0,0,0,0,0,0,-0.35031,0,0,0,0,0,0,1.0044,-1.3168,1.8563,0],[0,0,0,0,0,0,0,0,-0.43234,0,0,0,0,0,0,-0.26694,1.3677,-0.0099888,0],[0,0,0,0,0,0,0,0,0.095302,0,0,0,0,0,0,-1.5031,0.13032,1.1536,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.7127],[4.3528,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,-2.6957,-1.7916,0.14279,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,-0.76491,0.59619,1.0189,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,-2.1816,1.9548,0.42639,1.0388,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,-1.5642,-0.57372,0.21131,0.30781,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,-2.6105,0.85808,0.093817,-1.5491,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0.53869,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1.3467,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]])
    assert np.allclose(np.abs(sys_causal),np.abs(sys_causal_ref),0.01,0.01), "Balanced w.o. approximation causal not correct"
    assert np.allclose(np.abs(sys_anticausal),np.abs(sys_anticausal_ref),0.01,0.01), "Balanced w.o. approximation anticausal not correct"
    # Balanced with absolute approximation
    Sp1a = SeparationSVD(2.0,False)
    A1c_abs,B1c_abs,C1c_abs,D1c_abs = Sp1a.separate(T,True)     # Causal
    A1a_abs,B1a_abs,C1a_abs,D1a_abs = Sp1a.separate(T,False)    # Anticausal
    sys_causal = np.vstack([
        np.hstack([block_diag(*A1c_abs),block_diag(*B1c_abs)]),
        np.hstack([block_diag(*C1c_abs),block_diag(*D1c_abs)])
    ])
    sys_causal_ref = np.array([[0,0,0,0,0,0,0,0,0,0,0,0,-3.4058,-3.9842,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,-2.0628,1.7633,0,0,0,0,0,0,0,0],[0.76409,0.067964,0,0,0,0,0,0,0,0,0,0,0,0,-1.8371,-2.4521,-2.6855,0,0,0,0,0],[-0.3406,0.06674,0,0,0,0,0,0,0,0,0,0,0,0,-1.0518,-2.4975,0.35001,0,0,0,0,0],[0.21525,-0.30823,0,0,0,0,0,0,0,0,0,0,0,0,0.75782,-0.9142,1.9414,0,0,0,0,0],[-0.082257,-0.75327,0,0,0,0,0,0,0,0,0,0,0,0,0.63033,-0.24445,-0.99136,0,0,0,0,0],[0.0084328,-0.23724,0,0,0,0,0,0,0,0,0,0,0,0,-1.2245,0.49456,0.4078,0,0,0,0,0],[0,0,0.8009,-0.37823,-0.20989,0.024934,-0.015944,0,0,0,0,0,0,0,0,0,0,-1.6006,0,0,0,0],[0,0,-0.030131,-0.59617,0.74378,0.048807,-0.16007,0,0,0,0,0,0,0,0,0,0,0.32344,0,0,0,0],[0,0,-0.12687,-0.087078,-0.025419,0.41998,0.22021,0,0,0,0,0,0,0,0,0,0,-1.7976,0,0,0,0],[0,0,0,0,0,0,0,0.78626,0.00027434,0.29845,0,0,0,0,0,0,0,0,-1.2315,-1.8064,-0.91575,0],[0,0,0,0,0,0,0,-0.0067844,-0.32788,0.35781,0,0,0,0,0,0,0,0,1.6524,-1.2034,0.53124,0],[0,0,0,0,0,0,0,0,0,0,0,0,6,10,0,0,0,0,0,0,0,0],[-1.8221,1.5541,0,0,0,0,0,0,0,0,0,0,0,0,4,2,7,0,0,0,0,0],[-1.8619,-0.80421,0,0,0,0,0,0,0,0,0,0,0,0,2,10,7,0,0,0,0,0],[0,0,-2.0784,-1.6953,-0.050156,-0.75312,0.88909,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0],[0,0,-2.5088,-0.80712,-1.081,-0.97751,-0.79818,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0],[0,0,-2.3873,-0.811,-0.67447,1.7841,-0.12069,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,-2.8133,-1.561,1.0463,0,0,0,0,0,0,0,0,10,8,10,0],[0,0,0,0,0,0,0,-2.0014,2.2035,1.0721,0,0,0,0,0,0,0,0,4,7,2,0],[0,0,0,0,0,0,0,0,0,0,-3.2289,-1.8011,0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,0,-3.3656,1.728,0,0,0,0,0,0,0,0,0,7]])
    sys_anticausal = np.vstack([
        np.hstack([block_diag(*A1a_abs),block_diag(*B1a_abs)]),
        np.hstack([block_diag(*C1a_abs),block_diag(*D1a_abs)])
    ])
    sys_anticausal_ref = np.array([[0,-0.87426,0.26403,0,0,0,0,0,0,0,0.45947,0.6892,0.91894,0,0,0,0,0],[0,0,0,0.77078,0.33323,0.070169,-0.075168,0,0,0,0,0,0,-2.2765,0,0,0,0],[0,0,0,-0.07134,0.30568,-0.91803,0.046832,0,0,0,0,0,0,-0.44099,0,0,0,0],[0,0,0,0,0,0,0,-0.59995,0,0,0,0,0,0,-2.6182,-3.1425,-2.3731,0],[0,0,0,0,0,0,0,-0.35031,0,0,0,0,0,0,1.0044,-1.3168,1.8563,0],[0,0,0,0,0,0,0,-0.43234,0,0,0,0,0,0,-0.26694,1.3677,-0.0099888,0],[0,0,0,0,0,0,0,0.095302,0,0,0,0,0,0,-1.5031,0.13032,1.1536,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.7127],[4.3528,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,-2.6957,-1.7916,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,-0.76491,0.59619,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,-2.1816,1.9548,0.42639,1.0388,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,-1.5642,-0.57372,0.21131,0.30781,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,-2.6105,0.85808,0.093817,-1.5491,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0.53869,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1.3467,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]])
    assert np.allclose(np.abs(sys_causal),np.abs(sys_causal_ref),0.01,0.01), "Balanced with absolute approximation causal not correct"
    assert np.allclose(np.abs(sys_anticausal),np.abs(sys_anticausal_ref),0.01,0.01), "Balanced with absolute approximation anticausal not correct"
    # Balanced with relative approximation
    Sp1r = SeparationSVD(0.1,True)
    A1c_rel,B1c_rel,C1c_rel,D1c_rel = Sp1r.separate(T,True)    # Causal
    A1a_rel,B1a_rel,C1a_rel,D1a_rel = Sp1r.separate(T,False)   # Anticausal
    sys_causal = np.vstack([
        np.hstack([block_diag(*A1c_rel),block_diag(*B1c_rel)]),
        np.hstack([block_diag(*C1c_rel),block_diag(*D1c_rel)])
    ])
    sys_causal_ref = np.array([[0,0,0,0,0,0,0,0,0,0,0,-3.4058,-3.9842,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,-2.0628,1.7633,0,0,0,0,0,0,0,0],[0.76409,0.067964,0,0,0,0,0,0,0,0,0,0,0,-1.8371,-2.4521,-2.6855,0,0,0,0,0],[-0.3406,0.06674,0,0,0,0,0,0,0,0,0,0,0,-1.0518,-2.4975,0.35001,0,0,0,0,0],[0.21525,-0.30823,0,0,0,0,0,0,0,0,0,0,0,0.75782,-0.9142,1.9414,0,0,0,0,0],[-0.082257,-0.75327,0,0,0,0,0,0,0,0,0,0,0,0.63033,-0.24445,-0.99136,0,0,0,0,0],[0,0,0.8009,-0.37823,-0.20989,0.024934,0,0,0,0,0,0,0,0,0,0,-1.6006,0,0,0,0],[0,0,-0.030131,-0.59617,0.74378,0.048807,0,0,0,0,0,0,0,0,0,0,0.32344,0,0,0,0],[0,0,-0.12687,-0.087078,-0.025419,0.41998,0,0,0,0,0,0,0,0,0,0,-1.7976,0,0,0,0],[0,0,0,0,0,0,0.78626,0.00027434,0.29845,0,0,0,0,0,0,0,0,-1.2315,-1.8064,-0.91575,0],[0,0,0,0,0,0,-0.0067844,-0.32788,0.35781,0,0,0,0,0,0,0,0,1.6524,-1.2034,0.53124,0],[0,0,0,0,0,0,0,0,0,0,0,6,10,0,0,0,0,0,0,0,0],[-1.8221,1.5541,0,0,0,0,0,0,0,0,0,0,0,4,2,7,0,0,0,0,0],[-1.8619,-0.80421,0,0,0,0,0,0,0,0,0,0,0,2,10,7,0,0,0,0,0],[0,0,-2.0784,-1.6953,-0.050156,-0.75312,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0],[0,0,-2.5088,-0.80712,-1.081,-0.97751,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0],[0,0,-2.3873,-0.811,-0.67447,1.7841,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,-2.8133,-1.561,1.0463,0,0,0,0,0,0,0,0,10,8,10,0],[0,0,0,0,0,0,-2.0014,2.2035,1.0721,0,0,0,0,0,0,0,0,4,7,2,0],[0,0,0,0,0,0,0,0,0,-3.2289,-1.8011,0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,-3.3656,1.728,0,0,0,0,0,0,0,0,0,7]])
    sys_anticausal = np.vstack([
        np.hstack([block_diag(*A1a_rel),block_diag(*B1a_rel)]),
        np.hstack([block_diag(*C1a_rel),block_diag(*D1a_rel)])
    ])
    sys_anticausal_ref = np.array([[0,-0.87426,0.26403,0,0,0,0,0,0,0.45947,0.6892,0.91894,0,0,0,0,0],[0,0,0,0.77078,0.33323,0.070169,0,0,0,0,0,0,-2.2765,0,0,0,0],[0,0,0,-0.07134,0.30568,-0.91803,0,0,0,0,0,0,-0.44099,0,0,0,0],[0,0,0,0,0,0,-0.59995,0,0,0,0,0,0,-2.6182,-3.1425,-2.3731,0],[0,0,0,0,0,0,-0.35031,0,0,0,0,0,0,1.0044,-1.3168,1.8563,0],[0,0,0,0,0,0,-0.43234,0,0,0,0,0,0,-0.26694,1.3677,-0.0099888,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.7127],[4.3528,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,-2.6957,-1.7916,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,-0.76491,0.59619,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,-2.1816,1.9548,0.42639,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,-1.5642,-0.57372,0.21131,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,-2.6105,0.85808,0.093817,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0.53869,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,1.3467,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]])
    assert np.allclose(np.abs(sys_causal),np.abs(sys_causal_ref),0.01,0.01), "Balanced with relative approximation causal not correct"
    assert np.allclose(np.abs(sys_anticausal),np.abs(sys_anticausal_ref),0.01,0.01), "Balanced with relative approximation anticausal not correct"
    # Input normal w.o. approximation
    Sp0i = SeparationSVD(0,form=NormalForm.INPUT)
    A0c_i,B0c_i,C0c_i,D0c_i = Sp0i.separate(T,True)    # Causal
    A0a_i,B0a_i,C0a_i,D0a_i = Sp0i.separate(T,False)   # Anticausal
    for k in range(0,len(A0c_i)):
        I = A0c_i[k]@A0c_i[k].transpose() + B0c_i[k]@B0c_i[k].transpose()
        I_ref = np.identity(I.shape[0])
        assert np.allclose(I,I_ref), "Input normal causal not correct"
        I = A0a_i[k]@A0a_i[k].transpose() + B0a_i[k]@B0a_i[k].transpose()
        I_ref = np.identity(I.shape[0])
        assert np.allclose(I,I_ref), "Input normal anticausal not correct"
    # Output normal w.o. approximation
    Sp0o = SeparationSVD(0,form=NormalForm.OUTPUT)
    A0c_o,B0c_o,C0c_o,D0c_o = Sp0o.separate(T,True)    # Causal
    A0a_o,B0a_o,C0a_o,D0a_o = Sp0o.separate(T,False)   # Anticausal
    for k in range(0,len(A0c_o)):
        I = A0c_o[k].transpose()@A0c_o[k] + C0c_o[k].transpose()@C0c_o[k]
        I_ref = np.identity(I.shape[0])
        assert np.allclose(I,I_ref), "Output normal causal not correct"
        I = A0a_o[k].transpose()@A0a_o[k] + C0a_o[k].transpose()@C0a_o[k]
        I_ref = np.identity(I.shape[0])
        assert np.allclose(I,I_ref), "Output normal anticausal not correct"